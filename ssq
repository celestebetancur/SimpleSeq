#!/usr/bin/python

import sys
import time as T
from subprocess import call

script = ""
arg = ""

samples = []
numSamples = []

with open(".keywords","r") as f:
    for l in f:
        line = l[:-1]
        samples.append(line)
    samples = samples[1:]

with open(".files","r") as num:
    buf = ""
    for l in num:
        for char in l:
            if char == " ":
                pass
            elif char == "\n":
                numSamples.append(buf)
                buf = ""
            else:
                buf = buf + char
    numSamples = numSamples[1:]

listSamples = []

for i in range(len(samples)):
    listSamples.append((samples[i],numSamples[i]))
                
letters = "abcdefghijklmnopqrstuvwxyz"
numbers = str(range(0,10))
assignT = ":"
assignC = "="
end = "|;\n"

def lexAnalizer(arg):
    lexOutput = ""
    word = ""
    numS = ""
    num = 1
    num_ = False
    patternChuck = ""
    table = (word,num,patternChuck)
    Table = []
    for char in arg:
        if char in letters:
            word = word + char
        elif char == "/":
            lexOutput = lexOutput + "choose "
            num_ = True
        elif char == assignT:
            lexOutput = lexOutput + "sample" + " assignT "
        elif char == assignC:
            lexOutput = lexOutput + "sample" + " assignC "
        elif char in numbers:
            numS = numS + char
        elif char == "+":
            patternChuck = patternChuck + "1,"
        elif char == "-":
            patternChuck = patternChuck + "0,"
        elif char in end:
            lexOutput = lexOutput + "pattern "
            if num_ == True:
                num = int(numS)
                table = (word,num,patternChuck[:-1])
                Table.append((lexOutput,table))
            else:
                if len(word) != 0:
                    table = (word,num,patternChuck[:-1])
                    Table.append((lexOutput,table))
                else:
                    pass
            lexOutput = ""
            word = ""
            numS = ""
            num_ = False
            num = 1
            patternChuck = ""
    return Table

def parser(lexIn,table):
    sample,num,pattern = table
    if lexIn == "sample assignT pattern " or lexIn == "choose sample assignT pattern " or lexIn == "sample assignT choose pattern ":
        return (".file(\"%s\",\"%i\");\n" %(sample,num),".soundT([%s]);\n" %pattern)
    elif lexIn == "sample assignC pattern " or lexIn == "choose sample assignC pattern " or lexIn == "sample assignC choose pattern ":
        return (".file(\"%s\",\"%i\");\n" %(sample,num),".soundC([%s]);\n" %pattern)
    else:
        print "syntax error"

def checker(samp):
    for i,j in listSamples:
        if samp == i:
            return j
    

cycle = 1
counter = 0
synths = []
patterns = []


if len(sys.argv) in range(2,4):
    arg = sys.argv

    if len(sys.argv) == 2:
        filenameOut = ".SSQtemp.ck"
    else:
        filenameOut = arg[2]
    
    with open(arg[1],"r") as fileIn:
        fileRead = fileIn.read()
        header = "//autogenerated CHmUsiCk file from SSQlang\n\n"
        setSample = ""
        spork = ""
        time = "2::second => now;\n"
        counter = 0
        for lexIn,table in lexAnalizer(fileRead):
            word, num, pattern = table
            check = checker(word)
            sound, seq = parser(lexIn,table)
            if word not in samples:
                print "syntax error"
            elif num > int(check):
                print "error: %s has only %s wav files" %(word,check)
            else:
                header = header + "Sampler d%s;\n" %counter
                setSample = setSample + "d%s%s" %(counter , sound) 
                spork = spork + "spork~d%s%s" %(counter, seq)
                counter = counter + 1
                outFile = open(filenameOut, "w")
                outFile.write(header+"\n"+setSample+"\n"+spork+"\n"+time)
                outFile.close()

else:
    while(True):
        arg = raw_input("-> ")
        if arg == "exit":
            call(["chuck","--kill"])
            break
        if arg == "remove":
            call(["chuck","--status"])
            toRemove = raw_input("shred ID: ")
            call(["chuck","-",toRemove])
        else:
            header = "//autogenerated CHmUsiCk file from SSQlang\n\n"
            setSample = ""
            spork = ""
            time = "while(true) ms => now;\n"
            counter = 0
            for lexIn,table in lexAnalizer(arg):
                word, num, pattern = table
                check = checker(word)
                sound, seq = parser(lexIn,table)
                if word not in samples:
                    print "syntax error"
                elif num > int(check):
                    print "error: %s has only %s wav files" %(word,check)
                else:
                    header = header + "Sampler d%s;\n" %counter
                    setSample = setSample + "d%s%s" %(counter , sound) 
                    spork = spork + "spork~d%s%s" %(counter, seq)
                    counter = counter + 1
                    outFile = open(".SSQtemp.ck", "w")
                    outFile.write(header+"\n"+setSample+"\n"+spork+"\n"+time)
                    outFile.close()
            call(["chuck","+",".SSQtemp.ck"])
                    
