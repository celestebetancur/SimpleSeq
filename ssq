#!/usr/bin/python

import sys
import random
import time as T
from subprocess import call

script = ""
arg = ""

samples = []
numSamples = []
colors = []
colorsHX = []
colorsString = []

with open(".keywords","r") as f:
    for l in f:
        line = l[:-1]
        samples.append(line)
    samples = samples[1:]

with open(".files","r") as num:
    buf = ""
    for l in num:
        for char in l:
            if char == " ":
                pass
            elif char == "\n":
                numSamples.append(buf)
                buf = ""
            else:
                buf = buf + char
    numSamples = numSamples[1:]

with open(".colors","r") as color:
    buf = ""
    for line in color:
        for char in line:
            if char == "\t" or char == " ":
                pass
            elif char != "\n":
                buf = buf + char;
            else:
                colors.append(buf.split("#",))
                buf = ""

for i in colors:
    string, HX = i
    colorsHX.append("#"+HX)
    colorsString.append(string)

listSamples = []

for i in range(len(samples)):
    listSamples.append((samples[i],numSamples[i]))
                
letters = "abcdefghijklmnopqrstuvwxyz"
numbers = str(range(0,10))
assignT = ":"
assignC = "="
end = "|;\n"

def lexAnalizer(arg):
    lexOutput = ""
    word = ""
    numS = ""
    num = 1
    num_ = False
    patternChuck = ""
    table = (word,num,patternChuck)
    Table = []
    for char in arg:
        if char in letters:
            word = word + char
        elif char == "/":
            lexOutput = lexOutput + "choose "
            num_ = True
        elif char == assignT:
            lexOutput = lexOutput + "sample" + " assignT "
        elif char == assignC:
            lexOutput = lexOutput + "sample" + " assignC "
        elif char in numbers:
            numS = numS + char
        elif char == "+":
            patternChuck = patternChuck + "1,"
        elif char == "-":
            patternChuck = patternChuck + "0,"
        elif char in end:
            lexOutput = lexOutput + "pattern "
            if num_ == True:
                num = int(numS)
                table = (word,num,patternChuck[:-1])
                Table.append((lexOutput,table))
            else:
                table = (word,num,patternChuck[:-1])
                Table.append((lexOutput,table))

            lexOutput = ""
            word = ""
            numS = ""
            num_ = False
            num = 1
            patternChuck = ""
    if len(Table) == 0:
        return 0
    else:
        return Table


def parser(lexIn,table):
    sample,num,pattern = table
    if len(sample) == 0:
        print "Empty keyword"
        return 0,0
    elif len(pattern) == 0:
        print "Empty pattern"
        return 0,0
    else:
        if lexIn == "sample assignT pattern " or lexIn == "choose sample assignT pattern " or lexIn == "sample assignT choose pattern ":
            return (".file(\"%s\",\"%i\");\n" %(sample,num),".soundT([%s]);\n" %pattern)
        elif lexIn == "sample assignC pattern " or lexIn == "choose sample assignC pattern " or lexIn == "sample assignC choose pattern ":
            return (".file(\"%s\",\"%i\");\n" %(sample,num),".soundC([%s]);\n" %pattern)
        else:
            print "Syntax error"
            return 0,0
            

def checker(samp,array):
    for i,j in array:
        if samp == i:
            return j

def stoList(string):
    List = []
    for char in string:
        if char != ",":
            List.append(int(char))
    return List
        

def ssqColors(c,p):
    with open("SimpleSeqVisual/Template.js","r") as template:
        buff = template.read()
        with open("SimpleSeqVisual/SimpleSeq.js","w") as script:
            script.write("// autogenerated javascript file from SSQlang\n\n")
            script.write("var colors = %s;\n"%c)
            script.write("var pattern = %s;"%p)
            script.write(buff)


cycle = 1
counter = 0
synths = []
patterns = []
colorsArray = []
SSQColors = True

if len(sys.argv) in range(2,4):
    arg = sys.argv
    time = "2::second => now;\n"
    if len(arg) == 2:
        filenameOut = ".SSQtemp.ck"
    else:
        filenameOut = arg[2] + ".ck"
        time = "while(true){ms => now;}"
    with open(arg[1],"r") as fileIn:
        fileRead = fileIn.read()
        header = "//autogenerated CHmUsiCk file from SSQlang\n\n"
        setSample = ""
        spork = ""
        counter = 0
        for lexIn,table in lexAnalizer(fileRead):
            word, num, pattern = table
            check = checker(word, listSamples)
            sound, seq = parser(lexIn,table)
            if word not in samples:
                print "Syntax error"
            elif num > int(check):
                print "error: %s has only %s wav files" %(word,check)
            else:
                header = header + "Sampler d%s;\n" %counter
                setSample = setSample + "d%s%s" %(counter , sound) 
                spork = spork + "spork~d%s%s" %(counter, seq)
                counter = counter + 1
                outFile = open(filenameOut, "w")
                outFile.write(header+"\n"+setSample+"\n"+spork+"\n"+time)
                outFile.close()

elif len(sys.argv) == 1:
    call(["clear"])
    while(True):
        arg = raw_input("-> ")
        if arg == "colors":
            state = raw_input("(on/off): ")
            if state == "on":
                SSQColors = True
            elif state == "off":
                SSQColors = False
            else:
                print "wrong input"
        elif arg == "patterns":
            print patterns
        elif arg == "exit":
            call(["chuck","--kill"])
            break
        elif arg == "remove":
            call(["chuck","--status"])
            toRemove = raw_input("shred ID: ")
            call(["chuck","-",toRemove])
        else:
            header = "//autogenerated CHmUsiCk file from SSQlang\n\n"
            setSample = ""
            spork = ""
            time = "while(true) ms => now;\n"
            counter = 0
            LEX = lexAnalizer(arg)
            if LEX == 0:
                print "Syntax error"
            else:
                for lexIn,table in LEX:
                    word, num, pattern = table
                    check = checker(word,listSamples)
                    sound, seq = parser(lexIn,table)
                    if sound == 0 or seq == 0:
                        pass
                    else:
                        if word not in samples:
                            if word in colorsString and SSQColors == True:
                                patterns.append(stoList(pattern))
                                colorsArray.append("#"+checker(word,colors))
                                ssqColors(colorsArray,patterns)
                            else:
                                if word not in colorsString:
                                    print "Syntax error"
                                else:
                                    print "turn on colors mode by typing: colors"
                        elif num > int(check):
                            print "error: %s has only %s wav files" %(word,check)
                        else:
                            if SSQColors == True:
                                patterns.append(stoList(pattern))
                                colorsArray.append(colorsHX[random.sample(range(0,len(colorsHX)),1)[0]])
                                ssqColors(colorsArray,patterns)
                                header = header + "Sampler d%s;\n" %counter
                                setSample = setSample + "d%s%s" %(counter , sound) 
                                spork = spork + "spork~d%s%s" %(counter, seq)
                                counter = counter + 1
                                outFile = open(".SSQtemp.ck", "w")
                                outFile.write(header+"\n"+setSample+"\n"+spork+"\n"+time)
                                outFile.close()
                                call(["chuck","+",".SSQtemp.ck"])
                            else:
                                header = header + "Sampler d%s;\n" %counter
                                setSample = setSample + "d%s%s" %(counter , sound) 
                                spork = spork + "spork~d%s%s" %(counter, seq)
                                counter = counter + 1
                                outFile = open(".SSQtemp.ck", "w")
                                outFile.write(header+"\n"+setSample+"\n"+spork+"\n"+time)
                                outFile.close()
                                call(["chuck","+",".SSQtemp.ck"])

else:
    print "Wrong number of arguments"
